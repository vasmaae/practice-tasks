//–Ω–æ–º–µ—Ä 1
//–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–≤—É—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫.

//–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
/*
    –î–µ–∫ - –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö,
    –≤ –∫–æ—Ç–æ—Ä–æ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–∂–Ω–æ 
    –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∫–∞–∫ –≤ –Ω–∞—á–∞–ª–æ,
    —Ç–∞–∫ –∏ –≤ –∫–æ–Ω–µ—Ü.
    –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
    PushBack ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü.
    PushFront ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ.
    PopBack ‚Äî –≤—ã–±–æ—Ä–∫–∞ –∏–∑ –∫–æ–Ω—Ü–∞.
    PopFront ‚Äî –≤—ã–±–æ—Ä–∫–∞ –∏–∑ –Ω–∞—á–∞–ª–∞.
    IsEmpty ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è 
    —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
*/
class Node
{
    public int data;
    public Node? next;
    public Node? prev;
    public static Node GetNode(int data)
    {
        Node node = new();
        node.data = data;
        node.next = node.prev = null;
        return node;
    }
}
public class Deque
{
    Node? front;
    Node? end;
    int size;

    public Deque()
    {
        front = end = null;
        size = 0;
    }
    public bool IsEmpty()
    {
        return front == null;
    }
    public int Size()
    {
        return size;
    }
    public void PushFront(int data)
    {
        Node? node = Node.GetNode(data);
        if (node == null)
        {
            return;
        }
        else
        {
            if (front == null)
                front = end = node;
            else
            {
                node.next = front;
                front.prev = node;
                front = node;
            }
        }
    }
    public void PushBack(int data)
    {
        Node node = Node.GetNode(data);
        if (node == null)
        {
            return;
        }
        else
        {
            if (end == null)
                front = end = node;
            else
            {
                node.prev = end;
                end.next = node;
                end = node;
            }
            size++;
        }

    }
    public int? PopFront()
    {
        if (IsEmpty())
        {
            return null;
        }
        int data = front.data;
        if (!IsEmpty())
        {
            Node temp = front;
            front = front.next;
            if (front == null)
                end = null;
            else
                front.prev = null;
            size--;
        }
        return data;
    }
    public int? PopEnd()
    {
        if (IsEmpty())
        {
            return null;
        }
        int data = end.data;
        if (!IsEmpty())
        {
            Node temp = end;
            end = end.prev;
            if (end == null)
                front = null;
            else
                end.next = null;
            size--;
        }
        return data;
    }


    public IEnumerable<int> GetAll()
    {
        Node ptr = front;
        while (ptr != null)
        {
            int data = ptr.data;
            ptr = ptr.next;
            yield return data;
        }
        yield break;
    }
} 


//–Ω–æ–º–µ—Ä 2
//–ü—Ä–∏–¥—É—Ä–∫–æ–≤–∞—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (Stooge sort) 
/*
    –ê–ª–≥–æ—Ä–∏—Ç–º Stooge sort –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º:

    –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ –º–µ–Ω—å—à–µ, —á–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ, —Ç–æ –ø–æ–º–µ–Ω—è—Ç—å –∏—Ö –º–µ—Å—Ç–∞–º–∏.
    –ï—Å–ª–∏ –µ—Å—Ç—å 3 –∏–ª–∏ –±–æ–ª–µ–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–µ —Å–ø–∏—Å–∫–∞, —Ç–æ:
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–µ—Ä–≤—ã—Ö 2/3 —Å–ø–∏—Å–∫–∞
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2/3 —Å–ø–∏—Å–∫–∞
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–µ—Ä–≤—ã—Ö 2/3 —Å–ø–∏—Å–∫–∞ —Å–Ω–æ–≤–∞
    –ò–Ω–∞—á–µ: –∫–æ–Ω–µ—Ü –ø–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º—ã.
–í–∏–∫–∏–ø–µ–¥–∏—è*/
public void StoogeSort(int[] array, int left, int right)
{
    int tmp, k;
    if (array[left] > array[right])
    {
        CollectValue(array); //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–¥–∞-—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è 1
        tmp = array[left];
        array[left] = array[right];
        array[right] = tmp;
        CollectValue(array); //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–¥–∞-—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è 2
    }
    if ((left + 1) >= right)
    {
        return;
    }

    k = (right - left + 1) / 3;
    StoogeSort(array, left, right - k);
    StoogeSort(array, left + k, right);
    StoogeSort(array, left, right - k);
}
//–ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—É—á–∏–ª–æ—Å—å
public void CollectValue(int[] array)
{
    int size = array.GetLength(0);
    int[] arr = new int[size];
    for (int i = 0; i < size; i++)
    {
        arr[i] = array[i];
    }
    states.Add(arr);
}
//–Ω–æ–º–µ—Ä 3
/*
–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü ‚Äî –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–µ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–∑–º–µ—Ä–æ–º k√óm –∏ m√ón –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º k√ón, –ø–æ—Ç—Ä–∞—Ç–∏–≤ –Ω–∞ —ç—Ç–æ kmn –æ–ø–µ—Ä–∞—Ü–∏–π —É–º–Ω–æ–∂–µ–Ω–∏—è.

–ö–æ–≥–¥–∞ –º–∞—Ç—Ä–∏—Ü—ã –≤–µ–ª–∏–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑–º–µ—Ä–µ–Ω–∏—é –∏ –º–∞–ª—ã –ø–æ –¥—Ä—É–≥–æ–º—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞–ª—è—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –º–æ–∂–µ—Ç —Å–µ—Ä—å—ë–∑–Ω–æ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –ø–µ—Ä–µ–º–Ω–æ–∂–µ–Ω–∏–π –º–∞—Ç—Ä–∏—Ü. –î–æ–ø—É—Å—Ç–∏–º, –Ω–∞–º –¥–∞–Ω—ã 3 –º–∞—Ç—Ä–∏—Ü—ã 
ùê¥1, ùê¥2, ùê¥3 —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ 10√ó100, 100√ó5 –∏ 5√ó50. –°—É—â–µ—Å—Ç–≤—É–µ—Ç 2 —Å–ø–æ—Å–æ–±–∞ –∏—Ö –ø–µ—Ä–µ–º–Ω–æ–∂–µ–Ω–∏—è (—Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ–±–æ–∫): 
((ùê¥1 ùê¥2)ùê¥3) –∏ (ùê¥1(ùê¥2 ùê¥3))
–í –ø–µ—Ä–≤–æ–º —Å–ª—É—á–∞–µ –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è 10¬∑100¬∑5 + 10¬∑5¬∑50 = 7500 —Å–∫–∞–ª—è—Ä–Ω—ã—Ö —É–º–Ω–æ–∂–µ–Ω–∏–π,
–∞ –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ª—É—á–∞–µ 100¬∑5¬∑50 + 10¬∑100¬∑50 = 75000 —É–º–Ω–æ–∂–µ–Ω–∏–π ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ –Ω–∞–ª–∏—Ü–æ. 
–ü–æ—ç—Ç–æ–º—É –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–≥–æ–¥–Ω–µ–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É, —Ä–µ—à–∏–≤, 
–≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ —É–º–Ω–æ–∂–∞—Ç—å, —á–µ–º —É–º–Ω–æ–∂–∞—Ç—å —Å—Ä–∞–∑—É –≤ –ª–æ–±.

–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –¥–∞–Ω—ã n –º–∞—Ç—Ä–∏—Ü, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–µ—Ä–µ–º–Ω–æ–∂–∞—Ç—å –∏—Ö, —á—Ç–æ–±—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π —É–º–Ω–æ–∂–µ–Ω–∏—è –±—ã–ª–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º.
O(n^3) –∏–ª–∏ O(n^2) –≥—É–≥–ª–∏—Ç–µ —è –Ω–µ –∞–Ω–¥–µ—Å—Ç–µ–Ω–¥,  n - —á–∏—Å–ª–æ –º–∞—Ç—Ä–∏—Ü
*/
public int MinMatrixMultiplications(int[] p)
{
    int n = p.Length - 1;
    int[,] m = new int[n + 1, n + 1];
    for (int i = 1; i <= n; i++)
    {
        m[i, i] = 0;
    }
    for (int len = 2; len <= n; len++)
    {
        for (int i = 1; i <= n - len + 1; i++)
        {
            int j = i + len - 1;
            m[i, j] = Int32.MaxValue;
            for (int k = i; k < j; k++)
            {
                int q = m[i, k] + m[k + 1, j] + p[i - 1] * p[k] * p[j];
                if (q < m[i, j])
                {
                    m[i, j] = q;
                }
            }
        }
    }
    return m[1, n];
}

private void button1_Click(object sender, EventArgs e)
{
    //–æ—Ç–∫—É–¥–∞-—Ç–æ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü
    //–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫: arr[] = {40, 20, 30, 10, 30}
    //–ò–º–µ—é—Ç—Å—è 4 –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–∑–º–µ—Ä–∞–º–∏ 40√ó20, 20√ó30, 30√ó10, 10√ó30.
    //–ü—É—Å—Ç—å –≤—Ö–æ–¥–Ω—ã–º–∏ 4 –º–∞—Ç—Ä–∏—Ü–∞–º–∏ –±—É–¥—É—Ç A, B, C –∏ D.
    //–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–Ω–æ–∂–µ–Ω–∏–π –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º 
    //—Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ–±–æ–∫ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º (A(BC))D.
    //–ú–∏–Ω–∏–º—É–º 20*30*10 + 40*20*10 + 40*10*30.
    //https://www.geeksforgeeks.org/matrix-chain-multiplication-dp-8/
}
